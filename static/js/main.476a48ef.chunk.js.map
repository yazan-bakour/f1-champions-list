{"version":3,"sources":["app/views/Header.tsx","app/api.ts","app/store/seasonsSlice.ts","app/store/racesSlice.ts","app/store/standingTableDriverIdSlice.ts","app/store/championsSlice.ts","app/views/Result.tsx","app/views/Table.tsx","app/views/Main.tsx","App.tsx","app/store/index.ts","serviceWorker.ts","index.tsx"],"names":["Header","Box","height","bgcolor","paddingX","pt","position","src","alt","bottom","right","left","padding","Typography","component","color","align","fetchChampionsData","season","round","a","axios","get","fetchRaceData","fetchDriverData","fetchSeasonDataAsync","createAsyncThunk","response","results","data","MRData","SeasonTable","Seasons","seasonsSlice","createSlice","name","initialState","value","status","reducers","extraReducers","builder","addCase","rejected","state","action","console","error","pending","fulfilled","payload","selectSeasons","seasons","fetchRaceDataAsync","RaceTable","Races","raceSlice","selectRaces","races","fetchDriverDataAsync","StandingsTable","StandingsLists","DriverStandings","Driver","driverId","driverSlice","selectDriver","championId","fetchChampionDataAsync","race","result","driver","Results","condition","getState","selectChampion","championsSlice","foundDriverIdx","findIndex","x","push","champions","find","useStyles","makeStyles","theme","createStyles","responsiveFontSize","breakpoints","down","fontSize","Result","worldChampion","classes","dispatch","useDispatch","useSelector","useEffect","data-testid","variant","TableRow","selected","className","TableCell","raceName","givenName","table","minWidth","tRow","fontWeight","BasicTable","TableContainer","Paper","Table","aria-label","TableHead","TableBody","map","idx","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","Main","React","useState","open","setOpen","ListItem","button","onClick","id","ListItemText","primary","List","aria-labelledby","Collapse","in","timeout","unmountOnExit","disablePadding","listBackgroundColor","App","Container","store","configureStore","reducer","racesSlice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.476a48ef.chunk.js","sourcesContent":["import { Box, Typography } from \"@material-ui/core\";\r\n// Using material ui Box component which allows us to right sx css inline, and it will be compiled into single uglified class.\r\n// Also using material will not cause the compiler to go and look for css files, instead will read the css as javascript, whic is faster for browser to read. \r\nconst Header = () => {\r\n  return (\r\n    <Box height={100} bgcolor=\"#15151e\" paddingX={3} pt={2} position=\"relative\">\r\n      <Box>\r\n        <img src=\"/f1_logo.svg\" alt=\"F1 logo\" />\r\n      </Box>\r\n      <Box\r\n        position=\"absolute\"\r\n        bottom=\"0\"\r\n        right={0}\r\n        left=\"0\"\r\n        padding=\"12px\"\r\n        bgcolor=\"#38383f\"\r\n      >\r\n        <Typography component=\"h1\" color=\"secondary\" align=\"center\">\r\n          Welcome to F1 Champion list\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { StandingResponse, RaceType, SeasonType as SeasonType } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\n//This API file is to add any new endpoints and to be called by slices.\r\nexport const fetchChampionsData = async (season: string, round: string) =>\r\n  axios.get<RaceType>(\r\n    `http://ergast.com/api/f1/${season}/${round}/results.json`\r\n  );\r\n\r\nexport const fetchRaceData = async (season: any) =>\r\n  axios.get<RaceType>(`http://ergast.com/api/f1/${season}.json`);\r\n\r\nexport const fetchSeasonData = () =>\r\n  axios.get<SeasonType>(\"http://ergast.com/api/f1/seasons.json?offset=55\");\r\n\r\nexport const fetchDriverData = async (season: any) =>\r\n  axios.get<StandingResponse>(\r\n    `http://ergast.com/api/f1/${season}/driverStandings.json`\r\n  );\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \".\";\r\nimport { Season } from \"../types\";\r\nimport { fetchSeasonData } from \"../api\";\r\n\r\nexport interface SeasonsState {\r\n  value: Season[];\r\n  status: \"idle\" | \"loading\" | \"failed\";\r\n}\r\n\r\nconst initialState: SeasonsState = {\r\n  value: [],\r\n  status: \"idle\",\r\n};\r\n\r\nexport const fetchSeasonDataAsync = createAsyncThunk(\r\n  \"app/fetchSeasonData\",\r\n  async () => {\r\n    const response = await fetchSeasonData();\r\n    const results = response.data.MRData?.SeasonTable?.Seasons;\r\n    return results;\r\n  }\r\n);\r\n\r\nexport const seasonsSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchSeasonDataAsync.rejected, (state, action) => {\r\n        console.error(action.error);\r\n        state.status = \"failed\";\r\n        state.value = [];\r\n      })\r\n      .addCase(fetchSeasonDataAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchSeasonDataAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.value = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectSeasons = (state: RootState) => state.seasons;\r\n\r\nexport default seasonsSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \".\";\r\nimport { Race } from \"../types\";\r\nimport { fetchRaceData } from \"../api\";\r\n\r\nexport interface RaceState {\r\n  value: Race[];\r\n  status: \"idle\" | \"loading\" | \"failed\";\r\n}\r\n\r\nconst initialState: RaceState = {\r\n  value: [],\r\n  status: \"idle\",\r\n};\r\n\r\nexport const fetchRaceDataAsync = createAsyncThunk(\r\n  \"app/fetchRaceData\",\r\n  async (season: string) => {\r\n    const response = await fetchRaceData(season);\r\n    const results = response.data?.MRData?.RaceTable?.Races || []\r\n    return results;\r\n  }\r\n);\r\n\r\nexport const raceSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchRaceDataAsync.rejected, (state, action) => {\r\n        console.error(action.error);\r\n        state.status = \"failed\";\r\n      })\r\n      .addCase(fetchRaceDataAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchRaceDataAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.value = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectRaces = (state: RootState) => state.races;\r\n\r\nexport default raceSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \".\";\r\nimport { fetchDriverData } from \"../api\";\r\nimport { StandingResponse, Driver } from \"../types\";\r\n\r\nexport interface DriverState {\r\n  value: string;\r\n  status: \"idle\" | \"loading\" | \"failed\";\r\n}\r\n\r\nconst initialState: DriverState = {\r\n  value: '',\r\n  status: \"idle\",\r\n};\r\n\r\nexport const fetchDriverDataAsync = createAsyncThunk(\r\n  \"app/fetchDriverData\",\r\n  async (season: string) => {\r\n    const response = await fetchDriverData(season);\r\n    const results = response.data?.MRData?.StandingsTable?.StandingsLists?.[0]\r\n    ?.DriverStandings?.[0]?.Driver?.driverId || ''\r\n    return results;\r\n  }\r\n);\r\n\r\nexport const driverSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchDriverDataAsync.rejected, (state, action) => {\r\n        console.error(action.error);\r\n        state.status = \"failed\";\r\n      })\r\n      .addCase(fetchDriverDataAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchDriverDataAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        state.value = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectDriver = (state: RootState) => state.championId;\r\n\r\nexport default driverSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \".\";\r\nimport { Driver, Race, RaceType } from \"../types\";\r\nimport { fetchChampionsData } from \"../api\";\r\n\r\nexport interface DriverResultState {\r\n  value: {\r\n    driver: Driver;\r\n    season: string;\r\n    round: string;\r\n  }[];\r\n  status: \"idle\" | \"loading\" | \"failed\";\r\n}\r\n\r\nconst initialState: DriverResultState = {\r\n  value: [],\r\n  status: \"idle\",\r\n};\r\n\r\nexport const fetchChampionDataAsync = createAsyncThunk(\r\n  \"app/fetchChampionData\",\r\n  async (race: Race) => {\r\n    const response = await fetchChampionsData(race.season, race.round);\r\n    const result = {\r\n      driver: response.data?.MRData.RaceTable.Races?.[0]?.Results?.[0]?.Driver,\r\n      season: race.season,\r\n      round: race.round,\r\n    };\r\n    return result;\r\n  },\r\n  {\r\n    condition: (race: Race, { getState }) => {\r\n      const state = getState()\r\n      const champion = selectChampion(state as any, race)\r\n      \r\n      if(champion){\r\n        return false\r\n      }\r\n    },\r\n  }\r\n);\r\n\r\nexport const championsSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchChampionDataAsync.rejected, (state, action) => {\r\n        console.error(action.error);\r\n        state.status = \"failed\";\r\n      })\r\n      .addCase(fetchChampionDataAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchChampionDataAsync.fulfilled, (state, action) => {\r\n        state.status = \"idle\";\r\n        const foundDriverIdx = state.value.findIndex(\r\n          (x) =>\r\n            x.season === action.payload.season &&\r\n            x.round === action.payload.round\r\n        );\r\n        if (foundDriverIdx > 0) {\r\n          state.value[foundDriverIdx] = action.payload;\r\n        } else {\r\n          state.value.push(action.payload);\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectChampion = (state: RootState, race: Race) =>\r\n  state.champions?.value?.find(\r\n    (x) => x.season === race.season && x.round === race.round\r\n  )?.driver;\r\n\r\nexport default championsSlice.reducer;\r\n","import { Race } from \"../types\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  fetchChampionDataAsync,\r\n  selectChampion,\r\n} from \"../store/championsSlice\";\r\nimport { RootState } from \"../store\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\n//Material ui is ux friendly, fast to develop, and reusable components.\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    responsiveFontSize: {\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        fontSize: \"10px\",\r\n        \"& td\": {\r\n          fontSize: \"10px\",\r\n        },\r\n      },\r\n    },\r\n  })\r\n);\r\n// Result component is representting the table row with race name, winner, and world champion.\r\n// Using redux to fetch the end point safely, and dispatch the action/reducer of driver results.\r\n// Good thing Redux return also if data field or still loading, and based on that we can have better UX to show loading before data render.\r\n//Use selector is replaceing useState to detrmine the slice chosen and the data to return.\r\n// We useEffect because API will not load at first page load, so we need to go through react lif cicle to dispatch data.\r\nconst Result = ({\r\n  status,\r\n  race,\r\n  worldChampion,\r\n}: {\r\n  status: any;\r\n  race: Race;\r\n  worldChampion?: string;\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const driver = useSelector((state: RootState) => selectChampion(state, race));\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchChampionDataAsync(race));\r\n  }, [race]);\r\n\r\n  return (\r\n    <>\r\n      {status === \"loading\" ? (\r\n        <Typography data-testid=\"loading\" variant=\"body1\" align=\"center\">\r\n          Loading...\r\n        </Typography>\r\n      ) : (\r\n        <TableRow\r\n          selected={driver?.driverId === worldChampion}\r\n          className={classes.responsiveFontSize}\r\n        >\r\n          <TableCell data-testid=\"raceName\">{race.raceName}</TableCell>\r\n          <TableCell data-testid=\"champion\">\r\n            {driver?.givenName || \"-\"}\r\n          </TableCell>\r\n          <TableCell>\r\n            {driver?.driverId === worldChampion ? \"World Champion\" : \"\"}\r\n          </TableCell>\r\n        </TableRow>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Season, Race } from '../types'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from 'react'\r\nimport { fetchRaceDataAsync, selectRaces } from \"../store/racesSlice\";\r\nimport { fetchDriverDataAsync, selectDriver } from '../store/standingTableDriverIdSlice'\r\nimport Result from './Result'\r\n\r\n//Material ui makeStyle is similar concept with styled component, here we pass css through JS so browser wont take effert to understand the css.\r\nconst useStyles = makeStyles((theme: Theme)=>\r\n    createStyles({\r\n        table: {\r\n            minWidth: 650\r\n          },\r\n          tRow: {\r\n              '& th': {\r\n                  fontWeight: 'bold',\r\n                  [theme.breakpoints.down('sm')]: {\r\n                    fontSize: '10px'\r\n                }\r\n              }\r\n          }\r\n    })\r\n)\r\n\r\n// Using param season here in the API endpoint to get the season race data\r\n// Using Redux dispatch and selector to determine the slice actions/reducers \r\n// Get the winner/worldChampion from driverStanding API to compare with the race results\r\n// We pass race as param to results to use for api and to fetch results of every race within season.\r\nconst BasicTable = ({ season }: { season: Season['season'] }) => {\r\n\r\n  const classes = useStyles()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const {value: races} = useSelector(selectRaces) // add status back to check the loading part\r\n  const {value: driver, status} = useSelector(selectDriver)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchRaceDataAsync(season))\r\n    dispatch(fetchDriverDataAsync(season))\r\n  }, [season])\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label='simple table'>\r\n        <TableHead>\r\n          <TableRow className={classes.tRow}>\r\n            <TableCell>Race Name</TableCell>\r\n            <TableCell>Race Winner Name</TableCell>\r\n            <TableCell>World Champion</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {races?.map(\r\n            (race: Race, idx: number) => {\r\n              return (\r\n                <Result\r\n                  status={status}\r\n                  key={idx}\r\n                  race={race}\r\n                  worldChampion={driver}\r\n                />\r\n              )\r\n            }\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default BasicTable\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport {\r\n  Collapse,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchSeasonDataAsync, selectSeasons } from \"../store/seasonsSlice\";\r\nimport Table from \"./Table\";\r\n\r\n//Using Material UI for styled components\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  })\r\n);\r\n\r\n// Using react state hook to store values and update functions.\r\n//Using redux hooks to dispatch action that been created in slice.\r\n//Using react hooks effect to go through combination of react lifecycle, since the API call not loaded yet.\r\n//UseSelector to select the value of slice from redux.\r\n//Getting all seasons from 2005 till current from seasons API, and add them as accordion list.\r\nfunction Main() {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(\"-1\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { value: seasons, status } = useSelector(selectSeasons);\r\n\r\n  const handleClick = (id: string) => {\r\n    setOpen(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchSeasonDataAsync());\r\n  }, []);\r\n\r\n  // Checking nn data loaded! Then we show loading...\r\n  // Mapping all seasons into a single season for each clickable list row\r\n  return (\r\n    <>\r\n      {status === \"loading\" ? (\r\n        <Typography data-testid=\"loading\" variant=\"body1\" align=\"center\">\r\n          Loading...\r\n        </Typography>\r\n      ) : (\r\n        seasons.map((season, idx) => (\r\n          <Fragment key={idx}>\r\n            <ListItem\r\n              data-testid=\"list\"\r\n              button\r\n              onClick={() =>\r\n                handleClick(open === season.season ? \"-1\" : season.season)\r\n              }\r\n            >\r\n              <ListItemText primary={season.season} />\r\n              {open === season.season ? <ExpandLess /> : <ExpandMore />}\r\n            </ListItem>\r\n\r\n            <List component=\"nav\" aria-labelledby=\"nested-list-subheader\">\r\n              <Collapse\r\n                in={open === season.season}\r\n                timeout=\"auto\"\r\n                unmountOnExit\r\n              >\r\n                <List component=\"div\" disablePadding>\r\n                  <ListItem button className={classes.nested}>\r\n                    <Table season={season.season} />\r\n                  </ListItem>\r\n                </List>\r\n              </Collapse>\r\n            </List>\r\n          </Fragment>\r\n        ))\r\n      )}\r\n      {}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { Box, Container, makeStyles, createStyles, Theme } from '@material-ui/core';\nimport Header from './app/views/Header';\nimport Main from './app/views/Main'\n// ----------------------------------------------------------------------\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    listBackgroundColor: {\n      backgroundColor: 'rgba(225, 6, 0, 0.03)'\n    }\n  }),\n);\n// ----------------------------------------------------------------------\nfunction App() {\n  const classes = useStyles()\n  return (\n    <Box >\n      <Header />\n      <Container maxWidth='lg' className={classes.listBackgroundColor}>\n        <Main />\n      </Container>\n    </Box>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport seasonsSlice from \"./seasonsSlice\";\r\nimport racesSlice from \"./racesSlice\";\r\nimport driverSlice from \"./standingTableDriverIdSlice\";\r\nimport championsSlice from \"./championsSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    champions: championsSlice,\r\n    championId: driverSlice,\r\n    races: racesSlice,\r\n    seasons: seasonsSlice,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}